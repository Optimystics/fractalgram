{"version":3,"file":"8422.24dbd2c532b127de6f2a.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n  isUserId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatByUsername,\n  selectChatFolder, selectChatFullInfo, selectChatListType, selectCurrentChat, selectCurrentMessageList, selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectStickerSet,\n  selectSupportChat, selectTabState, selectThread, selectThreadInfo, selectThreadOriginChat, selectThreadTopMessageId,\n  selectUser, selectUserByPhoneNumber, selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID, noRequestThreadInfoUpdate, tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== id || currentThreadId !== threadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === id, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      callApi('abortChatRequests', { chatId: currentChatId, threadId: isChatOpened ? currentThreadId : undefined });\n    }\n  }\n\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n\n  if (threadId !== MAIN_THREAD_ID && !noRequestThreadInfoUpdate) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({\n        id, threadId, tabId, noRequestThreadInfoUpdate: true,\n      });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({\n        id,\n        threadId: result.topMessageId,\n        tabId,\n        shouldReplaceLast: true,\n        noRequestThreadInfoUpdate: true,\n      });\n    } else {\n      actions.openChat({\n        id,\n        threadId: topMessageId,\n        tabId,\n        noRequestThreadInfoUpdate: true,\n      });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, tabId = getCurrentTabId(), withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat, tabId);\n    if (withPhotos) {\n      actions.loadProfilePhotos({ profileId: chatId });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n      return;\n    }\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && commentId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, tabId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n\n  const { photos = [] } = chat;\n\n  const newPhotos = photos.filter((p) => photosToDelete.some((toDelete) => toDelete.id !== p.id));\n  global = getGlobal();\n  global = updateChat(global, chatId, { photos: newPhotos });\n\n  setGlobal(global);\n\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (chatId === global.currentUserId) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  if (isUserId(chatId)) {\n    global = updateUserFullInfo(global, chatId, {\n      isTranslationDisabled: isEnabled ? undefined : true,\n    });\n  } else {\n    global = updateChatFullInfo(global, chatId, {\n      isTranslationDisabled: isEnabled ? undefined : true,\n    });\n  }\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n    if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n      if (notificationsChat && lastLocalServiceMessage) {\n        newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n          ...notificationsChat,\n          lastMessage: lastLocalServiceMessage,\n        };\n      }\n    }\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    const replyingToById = result.replyingToById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!replyingToById && !thread) return;\n\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","arguments","length","undefined","isFullDraftSync","global","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","tabStates","Object","values","byTabId","visibleChats","flatMap","_ref7","tabId","currentChat","selectCurrentChat","visibleUsers","_ref8","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","idsToUpdateDraft","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","idsToUpdateReplyingToId","replyingToById","isFullyLoaded","setGlobal","loadFullChat","actions","chat","_len","_ref9","Array","_key","getCurrentTabId","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","migrateChat","_len2","_ref10","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","_len3","_ref11","_key3","selectUser","isBot","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref13","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref14","_key6","isChatBasicGroup","newChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","selectCurrentMessageList","filter","Boolean","nextChatId","getOrderedIds","ALL_FOLDER_ID","find","has","add","loadViewportMessages","threadId","payload","noRequestThreadInfoUpdate","currentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","reduce","_ref2","_ref3","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","closeStoryViewer","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","openPreviousChat","shouldReplaceLast","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","withPhotos","loadChat","loadProfilePhotos","profileId","lastLocalMessage","_payload$isMuted","muteUntil","isMuted","_payload$isMuted2","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","createdChat","e","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref4","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","storyId","Number","substr","shortName","text","formatShareText","slug","chatOrChannelPostId","commentId","comment","inviteHash","voicechat","livestream","substring","start","startApp","startapp","originalParts","webAppName","isWebApp","usernames","c","channelPostId","_len4","_ref12","_key4","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","discussionChatId","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","photosToDelete","nextPhoto","photos","newPhotos","p","toDelete","groups","addedById","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","_ref5","formattedText","replyingToId","readInboxMessageIdByTopicId","_ref6","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","isUserId","updateUserFullInfo","isTranslationDisabled","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}