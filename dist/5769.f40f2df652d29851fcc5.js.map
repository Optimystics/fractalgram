{"version":3,"file":"5769.f40f2df652d29851fcc5.js","mappings":"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","sources":["webpack://fractalgram/./src/global/actions/ui/localSearch.ts","webpack://fractalgram/./src/global/actions/ui/chats.ts","webpack://fractalgram/./src/global/actions/api/messages.ts","webpack://fractalgram/./src/global/actions/ui/messages.ts","webpack://fractalgram/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://fractalgram/./src/global/actions/ui/globalSearch.ts","webpack://fractalgram/./src/global/actions/ui/stickerSearch.ts","webpack://fractalgram/./src/global/actions/ui/users.ts","webpack://fractalgram/./src/global/actions/ui/misc.ts","webpack://fractalgram/./src/global/actions/ui/payments.ts","webpack://fractalgram/./src/global/actions/ui/mediaViewer.ts","webpack://fractalgram/./src/global/actions/ui/passcode.ts","webpack://fractalgram/./src/global/actions/api/symbols.ts","webpack://fractalgram/./src/global/actions/api/globalSearch.ts","webpack://fractalgram/./src/global/actions/api/localSearch.ts","webpack://fractalgram/./src/global/actions/api/management.ts","webpack://fractalgram/./src/global/actions/api/sync.ts","webpack://fractalgram/./src/global/actions/api/accounts.ts","webpack://fractalgram/./src/global/actions/api/users.ts","webpack://fractalgram/./src/global/reducers/bots.ts","webpack://fractalgram/./src/util/PopupManager.ts","webpack://fractalgram/./src/global/actions/api/bots.ts","webpack://fractalgram/./src/global/actions/api/twoFaSettings.ts","webpack://fractalgram/./src/global/actions/api/payments.ts","webpack://fractalgram/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://fractalgram/./src/global/reducers/reactions.ts","webpack://fractalgram/./src/global/actions/api/reactions.ts","webpack://fractalgram/./src/global/actions/api/statistics.ts","webpack://fractalgram/./src/util/areDeepEqual.ts","webpack://fractalgram/./src/global/actions/apiUpdaters/chats.ts","webpack://fractalgram/./src/global/actions/apiUpdaters/messages.ts","webpack://fractalgram/./src/global/actions/apiUpdaters/users.ts","webpack://fractalgram/./src/global/actions/apiUpdaters/symbols.ts","webpack://fractalgram/./src/global/actions/apiUpdaters/misc.ts","webpack://fractalgram/./src/global/actions/apiUpdaters/settings.ts","webpack://fractalgram/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://fractalgram/./src/global/actions/apiUpdaters/calls.ts","webpack://fractalgram/./src/global/actions/apiUpdaters/payments.ts","webpack://fractalgram/./src/hooks/useBeforeUnload.ts","webpack://fractalgram/./src/hooks/usePreventPinchZoomGesture.ts","webpack://fractalgram/./src/components/common/StickerSetModal.async.tsx","webpack://fractalgram/./src/components/common/UnreadCounter.tsx","webpack://fractalgram/./src/hooks/useConnectionStatus.ts","webpack://fractalgram/./src/hooks/useBrowserOnline.ts","webpack://fractalgram/./src/components/left/ConnectionStatusOverlay.tsx","webpack://fractalgram/./src/components/left/main/LeftMainHeader.tsx","webpack://fractalgram/./src/util/permanentWebVersion.ts","webpack://fractalgram/./src/components/left/main/ChatFolders.tsx","webpack://fractalgram/./src/components/left/search/LeftSearch.async.tsx","webpack://fractalgram/./src/components/left/main/ContactList.async.tsx","webpack://fractalgram/./src/components/left/NewChatButton.tsx","webpack://fractalgram/./src/components/left/main/LeftMain.tsx","webpack://fractalgram/./src/components/left/settings/Settings.async.tsx","webpack://fractalgram/./src/components/left/newChat/NewChat.async.tsx","webpack://fractalgram/./src/components/left/ArchivedChats.async.tsx","webpack://fractalgram/./src/components/left/LeftColumn.tsx","webpack://fractalgram/./src/hooks/useResize.ts","webpack://fractalgram/./src/components/middle/HeaderMenuContainer.async.tsx","webpack://fractalgram/./src/components/middle/HeaderActions.tsx","webpack://fractalgram/./src/components/middle/PinnedMessageNavigation.tsx","webpack://fractalgram/./src/components/middle/HeaderPinnedMessage.tsx","webpack://fractalgram/./src/util/imageResize.ts","webpack://fractalgram/./src/hooks/useMessageMediaMetadata.ts","webpack://fractalgram/./src/components/middle/AudioPlayer.tsx","webpack://fractalgram/./src/components/calls/group/GroupCallTopPane.tsx","webpack://fractalgram/./src/components/middle/ChatReportPanel.tsx","webpack://fractalgram/./src/components/middle/MiddleHeader.tsx","webpack://fractalgram/./src/components/middle/helpers/groupMessages.ts","webpack://fractalgram/./src/components/middle/hooks/useMessageObservers.ts","webpack://fractalgram/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://fractalgram/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://fractalgram/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://fractalgram/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://fractalgram/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://fractalgram/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://fractalgram/./src/components/middle/ActionMessage.tsx","webpack://fractalgram/./src/components/common/EmbeddedMessage.tsx","webpack://fractalgram/./src/components/middle/message/MessageMeta.tsx","webpack://fractalgram/./src/components/middle/message/Sticker.tsx","webpack://fractalgram/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://fractalgram/./src/components/middle/message/AnimatedEmoji.tsx","webpack://fractalgram/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://fractalgram/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://fractalgram/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://fractalgram/./src/components/middle/message/Photo.tsx","webpack://fractalgram/./src/components/middle/message/Video.tsx","webpack://fractalgram/./src/components/middle/message/Contact.tsx","webpack://fractalgram/./src/components/middle/message/PollOption.tsx","webpack://fractalgram/./src/components/middle/message/Poll.tsx","webpack://fractalgram/./src/components/middle/message/WebPage.tsx","webpack://fractalgram/./src/components/middle/message/Invoice.tsx","webpack://fractalgram/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://fractalgram/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://fractalgram/./src/util/map.ts","webpack://fractalgram/./src/components/middle/message/Location.tsx","webpack://fractalgram/./src/components/middle/message/Game.tsx","webpack://fractalgram/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://fractalgram/./src/components/middle/message/Album.tsx","webpack://fractalgram/./src/components/middle/message/RoundVideo.tsx","webpack://fractalgram/./src/components/middle/message/InlineButtons.tsx","webpack://fractalgram/./src/components/middle/message/CommentButton.tsx","webpack://fractalgram/./src/components/middle/message/CustomReactionAnimation.module.scss?e66e","webpack://fractalgram/./src/components/middle/message/CustomReactionAnimation.tsx","webpack://fractalgram/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://fractalgram/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://fractalgram/./src/components/middle/message/ReactionButton.tsx","webpack://fractalgram/./src/components/middle/message/Reactions.tsx","webpack://fractalgram/./src/components/middle/message/MessagePhoneCall.tsx","webpack://fractalgram/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://fractalgram/./src/components/middle/message/Message.tsx","webpack://fractalgram/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://fractalgram/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://fractalgram/./src/components/common/AboutAdsModal.async.tsx","webpack://fractalgram/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://fractalgram/./src/components/middle/message/SponsoredMessage.tsx","webpack://fractalgram/./src/components/middle/MessageListContent.tsx","webpack://fractalgram/./src/components/middle/hooks/useScrollHooks.ts","webpack://fractalgram/./src/components/middle/ContactGreeting.tsx","webpack://fractalgram/./src/components/middle/NoMessages.tsx","webpack://fractalgram/./src/components/middle/MessageList.tsx","webpack://fractalgram/./src/hooks/useNativeCopySelectedMessages.ts","webpack://fractalgram/./src/components/middle/hooks/useStickyDates.ts","webpack://fractalgram/./src/components/middle/ScrollDownButton.tsx","webpack://fractalgram/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://fractalgram/./src/components/middle/FloatingActionButtons.tsx","webpack://fractalgram/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://fractalgram/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://fractalgram/./src/util/audio.ts","webpack://fractalgram/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://fractalgram/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://fractalgram/./src/util/voiceRecording.ts","webpack://fractalgram/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://fractalgram/./src/components/middle/composer/hooks/useDraft.ts","webpack://fractalgram/./src/hooks/useDebouncedMemo.ts","webpack://fractalgram/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://fractalgram/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://fractalgram/./src/components/common/DeleteMessageModal.async.tsx","webpack://fractalgram/./src/components/ui/ResponsiveHoverButton.tsx","webpack://fractalgram/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://fractalgram/./src/components/middle/composer/AttachBotIcon.tsx","webpack://fractalgram/./src/components/middle/composer/AttachBotItem.tsx","webpack://fractalgram/./src/components/middle/composer/AttachMenu.tsx","webpack://fractalgram/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://fractalgram/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://fractalgram/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://fractalgram/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://fractalgram/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://fractalgram/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://fractalgram/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://fractalgram/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://fractalgram/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://fractalgram/./src/components/middle/composer/PollModal.async.tsx","webpack://fractalgram/./src/components/middle/composer/DropArea.async.tsx","webpack://fractalgram/./src/components/middle/composer/WebPagePreview.tsx","webpack://fractalgram/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://fractalgram/./src/components/middle/composer/BotMenuButton.tsx","webpack://fractalgram/./src/components/middle/composer/AccountPromptModal.tsx","webpack://fractalgram/./src/components/middle/composer/ExtPlatformSettings.tsx","webpack://fractalgram/./src/components/middle/composer/GroupNumberEdit.tsx","webpack://fractalgram/./src/components/middle/composer/SendMessageModal.tsx","webpack://fractalgram/./src/components/middle/composer/FractalResultModal.tsx","webpack://fractalgram/./src/components/middle/composer/LoadingModal.tsx","webpack://fractalgram/./src/components/middle/composer/Composer.tsx","webpack://fractalgram/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://fractalgram/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://fractalgram/./src/components/middle/composer/hooks/useEditing.ts","webpack://fractalgram/./src/components/middle/MobileSearch.async.tsx","webpack://fractalgram/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://fractalgram/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://fractalgram/./src/components/common/SeenByModal.async.tsx","webpack://fractalgram/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://fractalgram/./src/components/middle/ReactorListModal.async.tsx","webpack://fractalgram/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://fractalgram/./src/components/middle/MiddleColumn.tsx","webpack://fractalgram/./src/hooks/useCustomBackground.ts","webpack://fractalgram/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://fractalgram/./src/components/right/RightHeader.tsx","webpack://fractalgram/./src/components/right/hooks/useProfileViewportIds.ts","webpack://fractalgram/./src/components/right/hooks/useProfileState.ts","webpack://fractalgram/./src/components/right/Profile.tsx","webpack://fractalgram/./src/components/right/hooks/useTransitionFixes.ts","webpack://fractalgram/./src/components/right/RightSearch.async.tsx","webpack://fractalgram/./src/components/right/management/Management.async.tsx","webpack://fractalgram/./src/components/right/statistics/Statistics.async.tsx","webpack://fractalgram/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://fractalgram/./src/components/right/StickerSearch.async.tsx","webpack://fractalgram/./src/components/right/GifSearch.async.tsx","webpack://fractalgram/./src/components/right/PollResults.async.tsx","webpack://fractalgram/./src/components/right/AddChatMembers.tsx","webpack://fractalgram/./src/components/right/RightColumn.tsx","webpack://fractalgram/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://fractalgram/./src/util/download.ts","webpack://fractalgram/./src/components/main/DownloadManager.tsx","webpack://fractalgram/./src/components/main/GameModal.tsx","webpack://fractalgram/./src/components/main/Notifications.async.tsx","webpack://fractalgram/./src/components/main/Dialogs.async.tsx","webpack://fractalgram/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://fractalgram/./src/components/main/SafeLinkModal.async.tsx","webpack://fractalgram/./src/components/main/HistoryCalendar.async.tsx","webpack://fractalgram/./src/components/calls/group/GroupCall.async.tsx","webpack://fractalgram/./src/components/calls/ActiveCallHeader.async.tsx","webpack://fractalgram/./src/components/calls/phone/PhoneCall.async.tsx","webpack://fractalgram/./src/components/middle/MessageListHistoryHandler.tsx","webpack://fractalgram/./src/components/main/NewContactModal.async.tsx","webpack://fractalgram/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://fractalgram/./src/components/main/WebAppModal.async.tsx","webpack://fractalgram/./src/components/main/BotTrustModal.async.tsx","webpack://fractalgram/./src/components/main/AttachBotInstallModal.async.tsx","webpack://fractalgram/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://fractalgram/./src/components/main/ConfettiContainer.tsx","webpack://fractalgram/./src/components/main/UrlAuthModal.async.tsx","webpack://fractalgram/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://fractalgram/./src/components/payment/PaymentModal.async.tsx","webpack://fractalgram/./src/components/payment/ReceiptModal.async.tsx","webpack://fractalgram/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://fractalgram/./src/components/main/DeleteFolderDialog.async.tsx","webpack://fractalgram/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://fractalgram/./src/components/main/DraftRecipientPicker.async.tsx","webpack://fractalgram/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://fractalgram/./src/components/main/Main.tsx","webpack://fractalgram/./src/components/main/LockScreen.tsx","webpack://fractalgram/./src/components/main/LockScreen.module.scss?8252","webpack://fractalgram/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const { chatId, text, files } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport type { GlobalActions, GlobalState } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress, generateMessageId } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\ntype MessageSentCb = (newId: number, message: Partial<ApiMessage>) => void;\nconst messageSentCallbacks = new Map<string, MessageSentCb>();\nconst messageSentIds = new Map<number, string>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\naddActionHandler('loadRemainingMessages', async (global, actions, payload) => {\n  const { chatId, threadId } = payload || {};\n\n  await loadRemainingMessages(global, chatId, threadId);\n});\n\nexport async function loadRemainingMessages(\n  global: GlobalState,\n  chatId?: string,\n  threadId?: number,\n) {\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  if (!listedIds || listedIds.length === 0) {\n    return; // It should be loaded first\n  }\n\n  let size: number | undefined;\n  const limit = 100;\n  do {\n    size = listedIds.length;\n    await loadViewportMessages(chat, threadId, listedIds[0], LoadMoreDirection.Backwards, undefined, true, limit);\n    global = getGlobal();\n    listedIds = selectListedIds(global, chatId, threadId)!;\n  } while (listedIds.length - size >= limit);\n}\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\nfunction sendMessageImpl(\n  global: GlobalState, actions: any, payload: any,\n  sentCb?: MessageSentCb,\n) {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.attachments && payload.attachments.length > 1;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, sentCb);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const groupedAttachments = split(attachments as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n    for (let i = 0; i < groupedAttachments.length; i++) {\n      const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n      const groupedId = `${Date.now()}${i}`;\n\n      const cb = i === 0 ? sentCb : undefined;\n      sendMessage({\n        ...commonParams,\n        text: i === 0 ? text : undefined,\n        entities: i === 0 ? entities : undefined,\n        attachment: firstAttachment,\n        groupedId: restAttachments.length > 0 ? groupedId : undefined,\n      }, cb);\n\n      restAttachments.forEach((attachment: ApiAttachment) => {\n        sendMessage({\n          ...commonParams,\n          attachment,\n          groupedId,\n        });\n      });\n    }\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, sentCb);\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n}\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  return sendMessageImpl(global, actions, payload);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('sendPinnedMessage', (global, actions, payload) => {\n  return sendMessageImpl(global, actions, payload, (messageId) => {\n    getActions().pinMessage({\n      messageId, isUnpin: false, isSilent: true,\n    });\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId), serverTimeOffset,\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  if (threadId === MAIN_THREAD_ID) {\n    const result = await callApi('saveDraft', {\n      chat,\n      text,\n      entities,\n      replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    });\n\n    if (!result) {\n      draft.isLocal = true;\n    }\n  }\n  global = getGlobal();\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly && threadId === MAIN_THREAD_ID) {\n    void callApi('clearDraft', chat);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const chat = selectChat(global, payload.chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat);\n});\n\nasync function unpinAllMessages(chat: ApiChat) {\n  await callApi('unpinAllMessages', { chat });\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const { serverTimeOffset } = global;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      serverTimeOffset, chat, threadId, maxId,\n    });\n  });\n\n  // TODO Support local marking read for threads\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload) => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      messages: realMessages,\n      serverTimeOffset: getGlobal().serverTimeOffset,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestThreadInfoUpdate', { chat, threadId });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const { id, providedId } = update;\n      if (providedId) {\n        messageSentIds.set(id, providedId);\n      }\n      break;\n    }\n    case 'updateMessageSendSucceeded': {\n      const { localId, message } = update;\n      const providedId = messageSentIds.get(localId);\n      if (providedId) {\n        const cb = messageSentCallbacks.get(providedId);\n        if (cb) {\n          try {\n            cb(message.id, message);\n          } finally {\n            messageSentCallbacks.delete(providedId);\n            messageSentIds.delete(localId);\n          }\n        }\n      }\n      break;\n    }\n  }\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  limit = MESSAGE_LIST_SLICE,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(limit / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(limit + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, threadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, threadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(\n  params: {\n    chat: ApiChat;\n    text?: string;\n    entities?: ApiMessageEntity[];\n    replyingTo?: number;\n    attachment?: ApiAttachment;\n    sticker?: ApiSticker;\n    gif?: ApiVideo;\n    poll?: ApiNewPoll;\n    serverTimeOffset?: number;\n    isSilent?: boolean;\n    scheduledAt?: number;\n    sendAs?: ApiChat | ApiUser;\n    replyingToTopId?: number;\n  },\n  messageSentCb?: MessageSentCb,\n) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  params.serverTimeOffset = global.serverTimeOffset;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  let msgId: string | undefined;\n  if (messageSentCb) {\n    msgId = generateMessageId();\n    messageSentCallbacks.set(msgId, messageSentCb);\n    await callApi('sendMessage', params, progressCallback, msgId);\n  } else {\n    await callApi('sendMessage', params, progressCallback);\n  }\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsPeerIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat) {\n  const result = await callApi('fetchPinnedMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatId', async (global, actions, payload) => {\n  const { id } = payload;\n  let user = selectUser(global, id);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: id,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SELECT_DELEGATE_STR,\n  RANK_POLL_STRS,\n  ALLOWED_RANKS,\n  DEFAULT_PLATFORM,\n  FRACTAL_INFO_BY_PLATFORM,\n} from '../../../config';\nimport type { Rank } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectScheduledMessages,\n  selectChatMemberAccountMap,\n  selectLatestDelegatePoll,\n  selectLatestRankingPoll,\n  selectLatestPrompt,\n  // selectLatestDelegatePoll,\n  // selectChatRankingPolls,\n  // selectLatestRankingPoll,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport type {\n  AccountMap, ConsensusResultOption, ConsensusResults, ExtPlatformInfo, ExtUser,\n  GlobalState, PollModalDefaults,\n} from '../../types';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport assert from '../../../util/assert';\nimport { promptStrToPlatform } from '../../helpers/consensusMessages';\nimport { loadRemainingMessages } from '../api/messages';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage();\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId, shouldReplaceHistory });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\nfunction openPollModal(global: GlobalState, isQuiz?: boolean, defaultValues?: PollModalDefaults): GlobalState {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n      defaultValues,\n    },\n  };\n}\n\nfunction openAccountPromptModal(\n  global: GlobalState, platform: string,\n): GlobalState {\n  return {\n    ...global,\n    accountPromptModal: {\n      isOpen: true,\n      defaultValues: { platform },\n    },\n  };\n}\n\nfunction closeAccountPromptModal(global: GlobalState): GlobalState {\n  return {\n    ...global,\n    accountPromptModal: {\n      ...global.accountPromptModal,\n      isOpen: false,\n    },\n  };\n}\n\nfunction openResultsReportModal(\n  global: GlobalState,\n  page: GlobalState['consensusResultsModal']['page'],\n  extPlatformInfo?: ExtPlatformInfo,\n  guessedResults?: ConsensusResults,\n): GlobalState {\n  return {\n    ...global,\n    consensusResultsModal: {\n      isOpen: true,\n      page,\n      extPlatformInfo,\n      guessedResults,\n    },\n  };\n}\n\nfunction closeResultsReportModal(global: GlobalState): GlobalState {\n  return {\n    ...global,\n    consensusResultsModal: {\n      isOpen: false,\n      page: 'extPlatform',\n    },\n  };\n}\n\nfunction openLoadingModal(global: GlobalState, title: string): GlobalState {\n  return {\n    ...global,\n    loadingModal: {\n      isOpen: true,\n      title,\n    },\n  };\n}\n\nfunction closeLoadingModal(global: GlobalState): GlobalState {\n  return {\n    ...global,\n    loadingModal: {\n      isOpen: false,\n      title: '',\n    },\n  };\n}\n\naddActionHandler('closeLoadingModal', (global) => {\n  return closeLoadingModal(global);\n});\n\naddActionHandler('closeResultsReportModal', (global) => {\n  return closeResultsReportModal(global);\n});\n\naddActionHandler('closeAccountPromptModal', (global) => {\n  return closeAccountPromptModal(global);\n});\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz, defaultValues } = payload || {};\n\n  return openPollModal(global, isQuiz, defaultValues);\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\nfunction constructAccountOption(user: ExtUser, platform?: string) {\n  const extAccount = platform ? user.extAccounts[platform] : undefined;\n  let id1 = user.id;\n  const id2 = extAccount ? `(${extAccount}@${platform})` : '';\n  if (user.firstName) {\n    id1 = user.firstName;\n  } else if (user.usernames && user.usernames.length) {\n    id1 = user.usernames[0].username;\n  }\n\n  return `${id1} ${id2}`;\n}\n\nfunction constructAccountOptions(accountMap: AccountMap, platform?: string) {\n  const optionStrs = Array.from(accountMap).map(([, user]) => {\n    return constructAccountOption(user, platform);\n  });\n\n  return optionStrs;\n}\n\nfunction optionToAccount(accountMap: AccountMap, optionStr: string): ExtUser | undefined {\n  const re = /^(.+) \\((.+)@(.+)\\)$/;\n  const regResult = optionStr.match(re);\n  let nameStr: string = optionStr;\n  let extAccountStr: string | undefined;\n  let platformStr: string | undefined;\n  if (regResult) {\n    nameStr = regResult[1];\n    extAccountStr = regResult[2];\n    platformStr = regResult[3];\n  }\n\n  const id1Matches = new Array<string>();\n  const id2Matches = new Array<string>();\n  for (const [userId, user] of accountMap) {\n    if (user.firstName === nameStr) {\n      id1Matches.push(userId);\n    } else if (user.usernames && user.usernames.length && user.usernames[0].username === nameStr) {\n      id1Matches.push(userId);\n    } else if (userId === nameStr) {\n      id1Matches.push(userId);\n    }\n\n    if (extAccountStr && platformStr) {\n      if (user.extAccounts[platformStr] && user.extAccounts[platformStr] === extAccountStr) {\n        id2Matches.push(userId);\n      }\n    }\n  }\n\n  if (id1Matches.length === 1) {\n    if (id2Matches.length === 0 || (id2Matches.length === 1 && id2Matches[0] === id1Matches[0])) {\n      return accountMap.get(id1Matches[0]);\n    }\n  }\n\n  return undefined;\n}\n\nfunction getAccountOptions(\n  global: GlobalState,\n  platform?: string,\n): string[] | undefined {\n  const chat = selectCurrentChat(global);\n  const accountMap = chat && selectChatMemberAccountMap(global, chat, platform);\n  if (!accountMap) {\n    return undefined;\n  }\n\n  return constructAccountOptions(accountMap, platform);\n}\n\nfunction createPollWithAccounts(global: GlobalState, question: string, platform?: string): GlobalState {\n  if (global.pollModal.isOpen) {\n    return global;\n  }\n\n  // NOTE: This should not be called if there are a lot of users in the chat\n  const opt = getAccountOptions(global, platform);\n  assert(opt, 'Chat member list or messages not loaded');\n  const options = opt as string[];\n\n  const values: PollModalDefaults = {\n    isAnonymous: false,\n    pinned: true,\n    question,\n    options,\n  };\n\n  return openPollModal(global, false, values);\n}\n\nfunction getWinnerOption(poll: ApiPoll, accountMap: AccountMap, platform?: string): ConsensusResultOption | undefined {\n  const results = poll.results.results;\n  if (!results) {\n    return undefined;\n  }\n\n  let winnerVotes = 0;\n  let winnerCount = 0;\n  let winnerOption: ConsensusResultOption | undefined;\n  for (const result of results) {\n    if (result.votersCount > winnerVotes) {\n      const answer = poll.summary.answers.find((opt) => opt.option === result.option);\n      const refUser = answer && optionToAccount(accountMap, answer.text);\n      if (answer && refUser) {\n        const refreshedOption = constructAccountOption(refUser, platform);\n        winnerOption = {\n          option: refreshedOption,\n          votes: result.votersCount,\n          ofTotal: accountMap.size,\n          refUser,\n        };\n        winnerVotes = result.votersCount;\n        winnerCount = 1;\n      } else {\n        winnerCount = 0;\n        break;\n      }\n    } else if (result.votersCount === winnerVotes) {\n      winnerCount++;\n    }\n  }\n\n  return winnerCount === 1 && winnerVotes > 0 ? winnerOption : undefined;\n}\n\nfunction guessConsensusResults(\n  global: GlobalState,\n  platform?: string,\n  chat?: ApiChat,\n  accountMap?: AccountMap,\n): ConsensusResults | undefined {\n  chat = chat || selectCurrentChat(global);\n  const membersCount = chat?.membersCount;\n  if (!chat || !membersCount) {\n    return undefined;\n  }\n\n  accountMap = accountMap || selectChatMemberAccountMap(global, chat, platform);\n  if (!accountMap) {\n    return undefined;\n  }\n\n  const consensusResults: ConsensusResults = { rankings: {} };\n  const delegatePoll = selectLatestDelegatePoll(global, chat.id);\n  if (delegatePoll) {\n    consensusResults.delegate = getWinnerOption(delegatePoll, accountMap, platform);\n  }\n\n  const userIdsToRank = new Set<string>(accountMap.keys());\n  const leftToRank = new Set<Rank>([...ALLOWED_RANKS].slice(0, userIdsToRank.size));\n  for (const rank of ALLOWED_RANKS) {\n    const poll = selectLatestRankingPoll(global, chat.id, rank);\n    if (poll) {\n      const winner = getWinnerOption(poll, accountMap, platform);\n      if (winner?.refUser && userIdsToRank.has(winner.refUser.id)) {\n        consensusResults.rankings[rank] = winner;\n        userIdsToRank.delete(winner.refUser.id);\n        leftToRank.delete(rank);\n      }\n    }\n  }\n\n  if (userIdsToRank.size === 1 && leftToRank.size === 1) {\n    const rankRemaining = Array.from(leftToRank)[0];\n    const userIdRemaining = Array.from(userIdsToRank)[0];\n\n    consensusResults.rankings[rankRemaining] = {\n      option: constructAccountOption(accountMap.get(userIdRemaining)!, platform),\n      refUser: accountMap.get(userIdRemaining),\n    };\n  }\n\n  return consensusResults;\n}\n\nfunction getLatestPlatform(global: GlobalState): string | undefined {\n  const { chatId } = selectCurrentMessageList(global) ?? {};\n\n  const latestPromptStr = chatId && selectLatestPrompt(global, chatId)?.content.text?.text;\n  return latestPromptStr && promptStrToPlatform(latestPromptStr);\n}\n\naddActionHandler('composeConsensusMessage', async (global, actions, payload) => {\n  const { sendPinnedMessage, sendMessage } = getActions();\n  switch (payload.type) {\n    case 'delegatePoll': {\n      setGlobal(openLoadingModal(global, 'NewPoll'));\n      await loadRemainingMessages(getGlobal());\n      global = getGlobal();\n      if (global.loadingModal.isOpen) {\n        // If modal wasn't canceled\n        global = closeLoadingModal(global);\n\n        const platform = getLatestPlatform(global);\n        setGlobal(createPollWithAccounts(global, SELECT_DELEGATE_STR, platform));\n      }\n      break;\n    }\n    case 'rankingsPoll': {\n      setGlobal(openLoadingModal(global, 'NewPoll'));\n      await loadRemainingMessages(getGlobal());\n      global = getGlobal();\n      if (global.loadingModal.isOpen) {\n        global = closeLoadingModal(global);\n\n        const { rank } = payload;\n        const question = RANK_POLL_STRS[rank as number - 1];\n        const platform = getLatestPlatform(global);\n        setGlobal(createPollWithAccounts(global, question, platform));\n      }\n      break;\n    }\n    case 'accountPrompt': {\n      let { platform } = payload;\n      if (!platform) {\n        platform = DEFAULT_PLATFORM;\n      }\n      setGlobal(openAccountPromptModal(global, platform));\n      break;\n    }\n    case 'accountPromptSubmit': {\n      const { value } = payload;\n      const { platform, promptMessage } = value;\n      if (!platform.length || !promptMessage.length) {\n        return;\n      }\n\n      const { text, entities } = parseMessageInput(promptMessage);\n      sendPinnedMessage({ text, entities });\n\n      setGlobal(closeAccountPromptModal(global));\n      break;\n    }\n    case 'resultsReport': {\n      setGlobal(openLoadingModal(global, 'Consensus results'));\n      await loadRemainingMessages(getGlobal());\n      global = getGlobal();\n      if (global.loadingModal.isOpen) {\n        global = closeLoadingModal(global);\n\n        const platform = getLatestPlatform(global);\n\n        const extPlatformInfo = platform ? FRACTAL_INFO_BY_PLATFORM[platform] : undefined;\n\n        setGlobal(openResultsReportModal(global, 'extPlatform', extPlatformInfo));\n      }\n      break;\n    }\n    case 'resultsReportPlatformSelect': {\n      const { extPlatformInfo } = payload;\n      const platform = extPlatformInfo?.platform;\n      const results = guessConsensusResults(global, platform);\n      // TODO: signal error\n      if (!results) {\n        return;\n      }\n\n      const nextPage = extPlatformInfo ? 'editGroupNumber' : 'editText';\n\n      setGlobal(openResultsReportModal(global, nextPage, extPlatformInfo, results));\n      break;\n    }\n\n    case 'resultsReportGroupNumSelect': {\n      const { groupNum } = payload;\n      const { extPlatformInfo, guessedResults } = global.consensusResultsModal;\n\n      assert(extPlatformInfo && guessedResults, 'Platform info and guessedResults have to be defined at this point');\n\n      const results = { ...(guessedResults as ConsensusResults), groupNum };\n      setGlobal(openResultsReportModal(global, 'editText', extPlatformInfo, results));\n      break;\n    }\n    case 'resultsReportSubmit': {\n      const { message, pinMessage } = payload;\n\n      const { text, entities } = parseMessageInput(message, true);\n\n      if (pinMessage) {\n        sendPinnedMessage({ text, entities });\n      } else {\n        sendMessage({ text, entities });\n      }\n\n      setGlobal(closeResultsReportModal(global));\n      break;\n    }\n    default: {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const p: never = payload;\n    }\n  }\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(global.serverTimeOffset),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { selectChatMessage, selectCurrentMessageList, selectIsTrustedBot } from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, action, payload) => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global) => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  // eslint-disable-next-line no-useless-escape\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      const match = version.match(APP_VERSION_REGEX);\n      if (match && match[0] !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions) => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', async (global) => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal(updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global) => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global) => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate } = stickerSet;\n\n  void callApi(!installedDate ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global) => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global) => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, botUsername?: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiChat, ApiGlobalMessageSearchType } from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result;\n\n  if (chat) {\n    const localResult = await callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      result = {\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, type, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    searchSharedMedia(chat, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  });\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n\n  const update = isRevoked ? { revokedInvites: result } : { invites: result };\n\n  setGlobal(updateManagement(getGlobal(), chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\nimport { INIT_CONSENSUS_MSGS } from '../../initialState';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingId = selectEditingId(global, chatId, MAIN_THREAD_ID);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, MAIN_THREAD_ID);\n\n    return acc;\n  }, {});\n\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n  if (currentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n    const threadInfo = currentThreadId && selectThreadInfo(global, currentChatId, currentThreadId);\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentMessageListInfo = global.messages.byChatId[currentChatId];\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, currentChatId, byId);\n      global = updateListedIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n      global = safeReplaceViewportIds(global, currentChatId, MAIN_THREAD_ID, listedIds);\n\n      if (currentThreadId && threadInfo && threadInfo.originChannelId) {\n        const { originChannelId } = threadInfo;\n        const currentMessageListInfoOrigin = global.messages.byChatId[originChannelId];\n        const resultOrigin = await loadTopMessages(global.chats.byId[originChannelId]);\n        global = getGlobal();\n        if (resultOrigin) {\n          const byIdOrigin = buildCollectionByKey(resultOrigin.messages, 'id');\n          const listedIdsOrigin = Object.keys(byIdOrigin).map(Number);\n\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {\n                ...global.messages.byChatId,\n                [threadInfo.originChannelId]: {\n                  byId: byIdOrigin,\n                  threadsById: {\n                    [MAIN_THREAD_ID]: {\n                      ...(currentMessageListInfoOrigin?.threadsById[MAIN_THREAD_ID]),\n                      listedIds: listedIdsOrigin,\n                      viewportIds: listedIdsOrigin,\n                      outlyingIds: undefined,\n                    },\n                  },\n                  consensusMsgs: { ...INIT_CONSENSUS_MSGS },\n                },\n                [currentChatId]: {\n                  ...global.messages.byChatId[currentChatId],\n                  threadsById: {\n                    ...global.messages.byChatId[currentChatId].threadsById,\n                    [currentThreadId]: {\n                      ...(currentMessageListInfo?.threadsById[currentThreadId]),\n                      outlyingIds: undefined,\n                    },\n                  },\n                },\n              },\n            },\n          };\n        }\n      }\n\n      // TODO: update consensus info\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, currentChatId, result.threadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, MAIN_THREAD_ID, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId: MAIN_THREAD_ID,\n    offsetId: chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async () => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeWebSessions: {\n      byHash: result,\n      orderedHashes: Object.keys(result),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime(global.serverTimeOffset) - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users!, 'id'));\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime(global.serverTimeOffset) - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(global.serverTimeOffset),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean) {\n  await callApi('toggleAttachBot', { bot, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, botId, isFromBotMenu, url, startParam,\n  } = payload;\n  const { attachMenu: { bots } } = global;\n  if (!isFromBotMenu && !bots[botId]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        botId,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: { chatId, botId, startParam },\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global) => {\n  const { requestedAttachBotInstall } = global;\n\n  const { botId, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  await toggleAttachBot(bot, true);\n  if (onConfirm) {\n    const { action, payload } = onConfirm;\n    getActions()[action](payload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { botId, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const { attachMenu: { bots } } = global;\n  const bot = bots[botId];\n  if (!bot) return;\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || botId,\n      botId,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      botId,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ApiChat, ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const { requestInfo, saveInfo } = payload;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice } = result;\n\n  let global = setPaymentForm(getGlobal(), form);\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = setReceipt(global, result, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload) => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider, temporaryPassword } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  setGlobal(updatePayment(global, { status: 'pending' }));\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' });\n  global = closeInvoice(global);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step ?? PaymentStep.Checkout);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, { password }) => {\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } });\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } });\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout });\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout);\n  }\n  setGlobal(global);\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 18 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(\n  global: GlobalState, message: ApiMessage, userReactions: ApiReaction[],\n) {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload) => {\n  const { chatId, reaction } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(global.activeReactions, [messageId]) : {\n      ...global.activeReactions,\n      [messageId]: [\n        ...(global.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = {\n      ...global,\n      activeReactions: newActiveReactions,\n    };\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (!global.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = global.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...global.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(global.activeReactions, [messageId]);\n\n  return {\n    ...global,\n    activeReactions: newActiveReactions,\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((active) => active.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiChannelStatistics } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { updateStatistics, updateMessageStatistics, updateStatisticsGraph } from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if ((result as ApiChannelStatistics).recentTopMessages?.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    (result as ApiChannelStatistics).recentTopMessages = (result as ApiChannelStatistics).recentTopMessages\n      .map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, result));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","export function areDeepEqual<T extends any>(value1: T, value2: T): boolean {\n  const type1 = typeof value1;\n  const type2 = typeof value2;\n  if (type1 !== type2) {\n    return false;\n  }\n\n  if (type1 !== 'object') {\n    return value1 === value2;\n  }\n\n  const isArray1 = Array.isArray(value1);\n  const isArray2 = Array.isArray(value2);\n\n  if (isArray1 !== isArray2) {\n    return false;\n  }\n\n  if (isArray1) {\n    const array1 = value1 as any[];\n    const array2 = value2 as any[];\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    return array1.every((member1, i) => areDeepEqual(member1, array2[i]));\n  }\n\n  const object1 = value1 as AnyLiteral;\n  const object2 = value2 as AnyLiteral;\n  const keys1 = Object.keys(object1);\n\n  return keys1.every((key1) => areDeepEqual(object1[key1], object2[key1]));\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, typingStatus } = update;\n      setGlobal(updateChat(global, id, { typingStatus }));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const chat = selectChat(global, id);\n        if (chat && typingStatus && chat.typingStatus && chat.typingStatus.timestamp === typingStatus.timestamp) {\n          setGlobal(updateChat(global, id, { typingStatus: undefined }));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        global = updateChat(global, update.chatId, {\n          unreadCount: (chat.unreadCount || 0) + 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsChatWithBot,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, chatId, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.threadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.threadInfo.chatId,\n          message.threadInfo.threadId,\n          message.threadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      // Scroll down if bot message height is changed with an updated inline keyboard.\n      // A drawback: this will scroll down even if the previous scroll was not at bottom.\n      if (\n        currentMessage\n        && chat\n        && !message.isOutgoing\n        && chat.lastMessage?.id === message.id\n        && selectIsChatWithBot(global, chat)\n        && selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)\n        && selectIsViewportNewest(global, chatId, message.threadInfo?.threadId || MAIN_THREAD_ID)\n      ) {\n        actions.focusLastMessage();\n      }\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, chatId, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const currentPinnedIds = selectPinnedIds(global, chatId) || [];\n      const newPinnedIds = isPinned\n        ? [...currentPinnedIds, ...messageIds].sort((a, b) => b - a)\n        : currentPinnedIds.filter((id) => !messageIds.includes(id));\n\n      setGlobal(replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'pinnedIds', newPinnedIds));\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newTheadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newTheadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newTheadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(chatId, ids, actions, getGlobal());\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        }));\n      } else if (media) {\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, chatId, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: threadInfo.messagesCount + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const currentLastMessage = chats.byId[chatId]?.lastMessage;\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  return updateChat(global, chatId, { lastMessage: message });\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState) {\n  // Channel update\n\n  if (chatId) {\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const { threadInfo } = selectThreadByMessage(global, chatId, message) || {};\n      if (threadInfo) {\n        threadIdsToUpdate.push(threadInfo.threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { addNotifyException, updateChat, updateNotifySettings } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(call.isVideo);\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n\n      if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n        const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n        if (message && message.content.invoice) {\n          const { amount, currency, title } = message.content.invoice;\n\n          actions.showNotification({\n            message: langProvider.getTranslation('PaymentInfoHint', [\n              formatCurrency(amount, currency, langProvider.getTranslation.code),\n              title,\n            ]),\n          });\n        }\n      }\n\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n      if (!IS_PRODUCTION_HOST) {\n        global = closeInvoice(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  content,\n  contactsFilter,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n        >\n          <MenuItem\n            icon=\"saved-messages\"\n            onClick={handleSelectSaved}\n          >\n            {lang('SavedMessages')}\n          </MenuItem>\n          <MenuItem\n            icon=\"archive\"\n            onClick={onSelectArchived}\n          >\n            <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n            {archivedUnreadChatsCount > 0 && (\n              <div className=\"archived-badge\">{archivedUnreadChatsCount}</div>\n            )}\n          </MenuItem>\n          <MenuItem\n            icon=\"user\"\n            onClick={onSelectContacts}\n          >\n            {lang('Contacts')}\n          </MenuItem>\n          <MenuItem\n            icon=\"settings\"\n            onClick={onSelectSettings}\n          >\n            {lang('Settings')}\n          </MenuItem>\n          <MenuItem\n            icon=\"darkmode\"\n            onClick={handleDarkModeToggle}\n          >\n            <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n            <Switcher\n              id=\"darkmode\"\n              label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n              checked={theme === 'dark'}\n              noAnimation\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"animations\"\n            onClick={handleAnimationLevelChange}\n          >\n            <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n            <Switcher\n              id=\"animations\"\n              label=\"Toggle Animations\"\n              checked={animationLevel > 0}\n            />\n          </MenuItem>\n          <MenuItem\n            icon=\"help\"\n            onClick={handleOpenTipsChat}\n          >\n            {lang('TelegramFeatures')}\n          </MenuItem>\n          <MenuItem\n            icon=\"bug\"\n            href={FEEDBACK_URL}\n          >\n            Report Bug\n          </MenuItem>\n          {IS_BETA && (\n            <MenuItem\n              icon=\"permissions\"\n              onClick={handleChangelogClick}\n            >\n              Beta Changelog\n            </MenuItem>\n          )}\n          {withOtherVersions && (\n            <>\n              <MenuItem\n                icon=\"char-K\"\n                href={WEBK_VERSION_URL}\n                onClick={handleSwitchToWebK}\n              >\n                Switch to K Version\n              </MenuItem>\n              <MenuItem\n                icon=\"char-W\"\n                href={LEGACY_VERSION_URL}\n                onClick={handleSwitchToLegacy}\n              >\n                Switch to Old Version\n              </MenuItem>\n            </>\n          )}\n          {canInstall && (\n            <MenuItem\n              icon=\"install\"\n              onClick={getPromptInstall()}\n            >\n              Install App\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={globalSearchChatId || searchDate ? 'with-picker-item' : ''}\n          value={contactsFilter || searchQuery}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV || !folderTabs || !folderTabs.length) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n\n    if (!activeFolder || isInAllChatsFolder) {\n      return (\n        <ChatList\n          folderType=\"all\"\n          isActive={isActive}\n          lastSyncTime={lastSyncTime}\n          foldersDispatch={foldersDispatch}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    }\n\n    return (\n      <ChatList\n        folderType=\"folder\"\n        folderId={activeFolder.id}\n        isActive={isActive}\n        lastSyncTime={lastSyncTime}\n        onScreenSelect={onScreenSelect}\n        foldersDispatch={foldersDispatch}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div className=\"ChatFolders\">\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n        <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n        <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return <ChatFolders onScreenSelect={onScreenSelect} foldersDispatch={foldersDispatch} />;\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchQuery({ query: '' });\n      setGlobalSearchDate({ date: undefined });\n      setGlobalSearchChatId({ id: undefined });\n      resetChatCreation();\n      setTimeout(() => {\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, settingsScreen, setGlobalSearchQuery, setGlobalSearchDate, setGlobalSearchChatId,\n    resetChatCreation, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth);\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onContentChange={setContent}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const isChatOpen = Boolean(selectCurrentChat(global)?.id);\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    elementRef.current.style.width = `${initialWidth}px`;\n  }, [elementRef, initialWidth]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    elementRef.current!.style.width = '';\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      elementRef.current!.style.width = `${newWidth}px`;\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './HeaderMenuContainer';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HeaderMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HeaderMenuContainer = useModuleLoader(Bundles.Extra, 'HeaderMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HeaderMenuContainer ? <HeaderMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(HeaderMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useRef,\n  useCallback,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { ManagementScreens } from '../../types';\n\nimport { ANIMATION_LEVEL_MIN } from '../../config';\nimport {\n  ARE_CALLS_SUPPORTED, IS_PWA, IS_SINGLE_COLUMN_LAYOUT,\n} from '../../util/environment';\nimport {\n  isChatBasicGroup, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatBot,\n  selectIsUserBlocked,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport { useHotkeys } from '../../hooks/useHotkeys';\n\nimport Button from '../ui/Button';\nimport HeaderMenuContainer from './HeaderMenuContainer.async';\n\ninterface OwnProps {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  canExpandActions: boolean;\n}\n\ninterface StateProps {\n  noMenu?: boolean;\n  isChannel?: boolean;\n  isRightColumnShown?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  noAnimation?: boolean;\n}\n\n// Chrome breaks layout when focusing input during transition\nconst SEARCH_FOCUS_DELAY_MS = 320;\n\nconst HeaderActions: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  noMenu,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  pendingJoinRequests,\n  isRightColumnShown,\n  canExpandActions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  noAnimation,\n}) => {\n  const {\n    joinChannel,\n    sendBotCommand,\n    openLocalTextSearch,\n    restartBot,\n    requestCall,\n    requestNextManagementScreen,\n    showNotification,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuButtonRef = useRef<HTMLButtonElement>(null);\n  const lang = useLang();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleHeaderMenuOpen = useCallback(() => {\n    setIsMenuOpen(true);\n    const rect = menuButtonRef.current!.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n  }, []);\n\n  const handleHeaderMenuClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const handleHeaderMenuHide = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (shouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, shouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleJoinRequestsClick = useCallback(() => {\n    requestNextManagementScreen({ screen: ManagementScreens.JoinRequests });\n  }, [requestNextManagementScreen]);\n\n  const handleSearchClick = useCallback(() => {\n    openLocalTextSearch();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // iOS requires synchronous focus on user event.\n      const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n      searchInput.focus();\n    } else if (noAnimation) {\n      // The second RAF is necessary because teact must update the state and render the async component\n      requestAnimationFrame(() => {\n        requestAnimationFrame(setFocusInSearchInput);\n      });\n    } else {\n      setTimeout(setFocusInSearchInput, SEARCH_FOCUS_DELAY_MS);\n    }\n  }, [noAnimation, openLocalTextSearch]);\n\n  function handleRequestCall() {\n    requestCall({ userId: chatId });\n  }\n\n  const handleHotkeySearchClick = useCallback((e: KeyboardEvent) => {\n    if (!canSearch || !IS_PWA || e.shiftKey) {\n      return;\n    }\n\n    e.preventDefault();\n    handleSearchClick();\n  }, [canSearch, handleSearchClick]);\n\n  useHotkeys({\n    'Mod+F': handleHotkeySearchClick,\n  });\n\n  return (\n    <div className=\"HeaderActions\">\n      {!IS_SINGLE_COLUMN_LAYOUT && (\n        <>\n          {canExpandActions && !shouldSendJoinRequest && (canSubscribe || shouldJoinToSend) && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </Button>\n          )}\n          {canExpandActions && shouldSendJoinRequest && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleSubscribeClick}\n            >\n              {lang('ChannelJoinRequest')}\n            </Button>\n          )}\n          {canExpandActions && canStartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </Button>\n          )}\n          {canExpandActions && canRestartBot && (\n            <Button\n              size=\"tiny\"\n              ripple\n              fluid\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </Button>\n          )}\n          {canSearch && (\n            <Button\n              round\n              ripple={isRightColumnShown}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleSearchClick}\n              ariaLabel=\"Search in this chat\"\n            >\n              <i className=\"icon-search\" />\n            </Button>\n          )}\n          {canCall && (\n            <Button\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleRequestCall}\n              ariaLabel=\"Call\"\n            >\n              <i className=\"icon-phone\" />\n            </Button>\n          )}\n        </>\n      )}\n      {Boolean(pendingJoinRequests) && (\n        <Button\n          round\n          className=\"badge-button\"\n          ripple={isRightColumnShown}\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleJoinRequestsClick}\n          ariaLabel={isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n        >\n          <i className=\"icon-user\" />\n          <div className=\"badge\">{pendingJoinRequests}</div>\n        </Button>\n      )}\n      <Button\n        ref={menuButtonRef}\n        className={isMenuOpen ? 'active' : ''}\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        disabled={noMenu}\n        ariaLabel=\"More actions\"\n        onClick={handleHeaderMenuOpen}\n      >\n        <i className=\"icon-more\" />\n      </Button>\n      {menuPosition && (\n        <HeaderMenuContainer\n          chatId={chatId}\n          threadId={threadId}\n          isOpen={isMenuOpen}\n          anchor={menuPosition}\n          withExtraActions={IS_SINGLE_COLUMN_LAYOUT || !canExpandActions}\n          isChannel={isChannel}\n          canStartBot={canStartBot}\n          canRestartBot={canRestartBot}\n          canSubscribe={canSubscribe}\n          canSearch={canSearch}\n          canCall={canCall}\n          canMute={canMute}\n          canViewStatistics={canViewStatistics}\n          canLeave={canLeave}\n          canEnterVoiceChat={canEnterVoiceChat}\n          canCreateVoiceChat={canCreateVoiceChat}\n          onSubscribeChannel={handleSubscribeClick}\n          onSearchClick={handleSearchClick}\n          onClose={handleHeaderMenuClose}\n          onCloseAnimationEnd={handleHeaderMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat && isChatChannel(chat));\n\n    if (!chat || chat.isRestricted || selectIsInSelectMode(global)) {\n      return {\n        noMenu: true,\n      };\n    }\n\n    const bot = selectChatBot(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isDiscussionThread = messageListType === 'thread' && threadId !== MAIN_THREAD_ID;\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const canSearch = isMainThread || isDiscussionThread;\n    const canCall = ARE_CALLS_SUPPORTED && isUserId(chat.id) && !isChatWithSelf && !bot;\n    const canMute = isMainThread && !isChatWithSelf && !canSubscribe;\n    const canLeave = isMainThread && !canSubscribe;\n    const canEnterVoiceChat = ARE_CALLS_SUPPORTED && chat.isCallActive;\n    const canCreateVoiceChat = ARE_CALLS_SUPPORTED && !chat.isCallActive\n      && (chat.adminRights?.manageCall || (chat.isCreator && isChatBasicGroup(chat)));\n    const canViewStatistics = chat.fullInfo?.canViewStatistics;\n    const pendingJoinRequests = chat.fullInfo?.requestsPending;\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const noAnimation = global.settings.byKey.animationLevel === ANIMATION_LEVEL_MIN;\n\n    return {\n      noMenu: false,\n      isChannel,\n      isRightColumnShown,\n      canStartBot,\n      canRestartBot,\n      canSubscribe,\n      canSearch,\n      canCall,\n      canMute,\n      canViewStatistics,\n      canLeave,\n      canEnterVoiceChat,\n      canCreateVoiceChat,\n      pendingJoinRequests,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      noAnimation,\n    };\n  },\n)(HeaderActions));\n\nfunction setFocusInSearchInput() {\n  const searchInput = document.querySelector<HTMLInputElement>('.RightHeader .SearchInput input');\n  searchInput?.focus();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport { getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle || `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <img src={blobUrl || thumbDataUri} width={width} height={height} alt=\"\" />\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number) => {\n    const rate = PLAYBACK_RATES[newRate];\n    setAudioPlayerPlaybackRate({ playbackRate: rate });\n    setPlaybackRate(rate);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (isContextMenuOpen) return;\n    updatePlaybackRate(playbackRate === 1 ? 2 : 1);\n  }, [isContextMenuOpen, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0] || 1;\n    return (\n      <Button\n        round\n        className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Playback Rate\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handlePlaybackClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <span className=\"playback-button-inner\">\n          {playbackRate === 1 ? 2 : displayRate}Х\n        </span>\n      </Button>\n    );\n  }, [handleBeforeContextMenu, handleContextMenu, handlePlaybackClick, playbackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n        >\n          {renderPlaybackRateMenuItem(0.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(0.75, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(2, playbackRate, updatePlaybackRate)}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(rate: number, currentRate: number, onClick: (rate: number) => void) {\n  return (\n    <MenuItem\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={currentRate === PLAYBACK_RATES[rate] ? 'check' : undefined}\n      customIcon={currentRate !== PLAYBACK_RATES[rate] ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiGroupCall, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectChatGroupCall } from '../../../global/selectors/calls';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport './GroupCallTopPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasPinnedOffset: boolean;\n};\n\ntype StateProps = {\n  groupCall?: ApiGroupCall;\n  isActive: boolean;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n  animationLevel: AnimationLevel;\n};\n\nconst GroupCallTopPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  groupCall,\n  hasPinnedOffset,\n  usersById,\n  chatsById,\n  animationLevel,\n}) => {\n  const {\n    joinGroupCall,\n    subscribeToGroupCallUpdates,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleJoinGroupCall = useCallback(() => {\n    joinGroupCall({\n      chatId,\n    });\n  }, [joinGroupCall, chatId]);\n\n  const participants = groupCall?.participants;\n\n  const fetchedParticipants = useMemo(() => {\n    if (participants) {\n      return Object.values(participants).filter((_, i) => i < 3).map(({ id, isUser }) => {\n        if (isUser) {\n          if (!usersById[id]) {\n            return undefined;\n          }\n          return { user: usersById[id] };\n        } else {\n          if (!chatsById[id]) {\n            return undefined;\n          }\n          return { chat: chatsById[id] };\n        }\n      }).filter(Boolean);\n    } else return [];\n  }, [chatsById, participants, usersById]);\n\n  useEffect(() => {\n    if (!groupCall?.id) return undefined;\n    if (!isActive && groupCall.isLoaded) return undefined;\n\n    subscribeToGroupCallUpdates({\n      id: groupCall.id,\n      subscribed: true,\n    });\n\n    return () => {\n      subscribeToGroupCallUpdates({\n        id: groupCall.id,\n        subscribed: false,\n      });\n    };\n  }, [groupCall?.id, groupCall?.isLoaded, isActive, subscribeToGroupCallUpdates]);\n\n  if (!groupCall) return undefined;\n\n  return (\n    <div\n      className={buildClassName(\n        'GroupCallTopPane',\n        hasPinnedOffset && 'has-pinned-offset',\n        !isActive && 'is-hidden',\n      )}\n      onClick={handleJoinGroupCall}\n    >\n      <div className=\"info\">\n        <span className=\"title\">{lang('VoipGroupVoiceChat')}</span>\n        <span className=\"participants\">{lang('Participants', groupCall.participantsCount || 0, 'i')}</span>\n      </div>\n      <div className=\"avatars\">\n        {fetchedParticipants.map((p) => {\n          if (!p) return undefined;\n          if (p.user) {\n            return <Avatar key={p.user.id} user={p.user} animationLevel={animationLevel} />;\n          } else {\n            return <Avatar key={p.chat.id} chat={p.chat} animationLevel={animationLevel} />;\n          }\n        })}\n      </div>\n      <Button round className=\"join\">\n        {lang('VoipChatJoin')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chat = selectChat(global, chatId)!;\n    const groupCall = selectChatGroupCall(global, chatId);\n    return {\n      groupCall,\n      usersById: global.users.byId,\n      chatsById: global.chats.byId,\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      isActive: ((!groupCall ? (chat && chat.isCallNotEmpty && chat.isCallActive)\n        : (groupCall.participantsCount > 0 && groupCall.isLoaded)))\n        && (global.groupCalls.activeGroupCallId !== groupCall?.id),\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(GroupCallTopPane));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        isButtonsInOneRow\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n\n  useEffect(() => {\n    if (threadId === MAIN_THREAD_ID && lastSyncTime && isReady) {\n      loadPinnedMessages({ chatId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId });\n  }, [openChatWithInfo, chatId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId: MAIN_THREAD_ID, type: 'pinned' });\n  }, [openChat, chatId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (threadId === MAIN_THREAD_ID && messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    threadId, messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    return (\n      messageListType === 'thread' && threadId === MAIN_THREAD_ID ? (\n        renderMainThreadInfo()\n      ) : messageListType === 'thread' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('CommentsCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'pinned' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {lang('PinnedMessagesCount', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : messageListType === 'scheduled' ? (\n        <>\n          {renderBackButton()}\n          <h3>\n            {isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')}\n          </h3>\n        </>\n      ) : undefined\n    );\n  }\n\n  function renderMainThreadInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer\n              withFullInfo\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n    const { typingStatus } = chat || {};\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      isMainThread && chat && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_LOADING = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  memoFirstUnreadIdRef,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type { ApiUser, ApiMessage, ApiChat } from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <>\n      <img\n        src={blobUrl || thumbDataUri}\n        width={width}\n        height={height}\n        alt=\"\"\n        className={buildClassName('pictogram', isRoundVideo && 'round')}\n        draggable={!isProtected}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [fullMediaData, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      if (onCancelUpload) {\n        onCancelUpload(message);\n      }\n    } else if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n    } else if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    } else if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    } else if (onClick) {\n      onClick(message.id);\n    }\n  }, [isUploading, isDownloading, fullMediaData, isPlayAllowed, onClick, onCancelUpload, message]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n  showFraction?: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n  showFraction,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const votesFraction = result ? `${result.votersCount}/${totalVoters || 0}` : '';\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {showFraction && votesFraction} {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\nimport type { ChatConsensusMessages } from '../../../global/types';\nimport { selectChat, selectChatConsensusMsgs } from '../../../global/selectors';\nimport { isConsensusMsg } from '../../../global/helpers/consensusMessages';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n  serverTimeOffset: number;\n  consensusMessages: ChatConsensusMessages;\n  memberCount?: number;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n  serverTimeOffset,\n  consensusMessages,\n  memberCount,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + serverTimeOffset, summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const isConsensusPoll = consensusMessages && isConsensusMsg(consensusMessages, message.id);\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    let total = totalVoters;\n    let showFraction = false;\n    if (isConsensusPoll && memberCount) {\n      total = memberCount;\n      showFraction = true;\n    }\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={total}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n        showFraction={showFraction}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!isConsensusPoll && !canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isConsensusPoll && memberCount && !isMultiple && (\n        <div className=\"poll-voters-count\">\n          {results.totalVoters}/{getReadableVotersCount(lang, summary.quiz, memberCount)}\n        </div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { serverTimeOffset, users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    const memberCount = selectChat(global, message.chatId)?.membersCount;\n    const consensusMessages = selectChatConsensusMsgs(global, message.chatId);\n\n    return {\n      recentVoterIds,\n      usersById,\n      serverTimeOffset,\n      memberCount,\n      consensusMessages,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"dots\":\"Nlcnrzv_f5cSxFsPOGt2\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"canvas\":\"a_WnxsI6X0B4j7QRRoOA\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useInterval from '../../../hooks/useInterval';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\nconst BLUR_RADIUS = 25;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const canvasRef = useCanvasBlur(thumbnail?.dataUri, false, undefined, BLUR_RADIUS, width, height);\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <canvas ref={canvasRef} className={styles.canvas} width={width} height={height} />\n      <div className={styles.dots} />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  serverTimeOffset: number;\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n  serverTimeOffset,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime(serverTimeOffset);\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime(serverTimeOffset);\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, serverTimeOffset, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const icon = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={icon} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TaAutZxIFX4go5HmM7Cg\",\"particle\":\"b5KMGtz_lQAs58tR80GG\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './CustomReactionAnimation.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomReactionAnimation: FC<OwnProps> = ({\n  reaction,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(stickerHash);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData) return undefined;\n\n  return (\n    <div className={styles.root}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomReactionAnimation);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomReactionAnimation from './CustomReactionAnimation';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 1.875 * REM;\nconst EFFECT_SIZE = 6.25 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomReactionAnimation reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  threadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 2 * REM;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  serverTimeOffset,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  threadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(threadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = threadInfo && !isInDocumentGroupNotLast && messageListType === 'thread' && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: threadInfo && threadInfo?.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime(serverTimeOffset)),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasReply && 'reply-message',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasReply && (\n          <EmbeddedMessage\n            message={replyMessage}\n            noUserColors={isOwn}\n            isProtected={isProtected}\n            sender={replyMessageSender}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleReplyClick}\n          />\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n            serverTimeOffset={serverTimeOffset}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && !media) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={threadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime, serverTimeOffset,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, threadInfo, forwardInfo, transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualThreadInfo = threadInfo\n      ? selectThreadInfo(global, threadInfo.chatId, threadInfo.threadId) || threadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      serverTimeOffset,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      threadInfo: actualThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      genericEffects: global.genericEmojiEffects,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasReply,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasReply?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasReply) {\n    classNames.push('is-reply');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasReply || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  threadId: number;\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  threadId,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\n\nimport './NoMessages.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf, type, isGroupChatJustCreated,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiBotInfo, ApiMessage, ApiRestrictionReason } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useResizeObserver } from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {!botInfo && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated) ? (\n        <NoMessages\n          chatId={chatId}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n  fetchBlob,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, isQuick: boolean, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    if (isQuick) {\n      const img = await preloadImage(blobUrl);\n      const { width, height } = img;\n      const shouldShrink = width > MAX_QUICK_IMG_SIZE || height > MAX_QUICK_IMG_SIZE;\n\n      if (shouldShrink || mimeType !== 'image/jpeg') {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        const newBlob = await fetchBlob(resizedUrl);\n        return buildAttachment(filename, newBlob, true, options);\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    ...options,\n  };\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst CLIPBOARD_ACCEPTED_TYPES = ['image/png', 'image/jpeg', 'image/gif'];\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (files.length === 0 && !pastedText) {\n        return;\n      }\n\n      if (files.length > 0 && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file, files.length === 1 && CLIPBOARD_ACCEPTED_TYPES.includes(file.type));\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        botId: bot.id,\n        chatId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActionPayloads, GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport type { Rank } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canAttachDelegatePolls: boolean;\n  canAttachRankingPolls: { [r in Rank]: boolean };\n  canAttachAccountPrompts: boolean;\n  canAttachResultReport: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onConsensusMsg: (payload: ActionPayloads['composeConsensusMessage']) => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canAttachDelegatePolls,\n  canAttachRankingPolls,\n  canAttachResultReport,\n  canAttachAccountPrompts,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  onConsensusMsg,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const handleDelegatePoll = useCallback(() => {\n    onConsensusMsg({ type: 'delegatePoll' });\n  }, [onConsensusMsg]);\n\n  const handleRankingPoll = useCallback((rank: Rank) => {\n    onConsensusMsg({ type: 'rankingsPoll', rank });\n  }, [onConsensusMsg]);\n\n  const handleAccountPrompt = useCallback(() => {\n    onConsensusMsg({ type: 'accountPrompt' });\n  }, [onConsensusMsg]);\n\n  const handleResultReport = useCallback(() => {\n    onConsensusMsg({ type: 'resultsReport' });\n  }, [onConsensusMsg]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  function renderRankingPoll(rank: Rank) {\n    return (\n      // eslint-disable-next-line react/jsx-no-bind\n      <MenuItem icon=\"poll\" onClick={() => handleRankingPoll(rank)}>\n        {lang(`Level ${rank} poll`)}\n      </MenuItem>\n    );\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n\n        {canAttachAccountPrompts && (\n          <MenuItem icon=\"poll\" onClick={handleAccountPrompt}>\n            {lang('Account prompt')}\n          </MenuItem>\n        )}\n\n        {canAttachPolls && canAttachRankingPolls[6] && renderRankingPoll(6) }\n        {canAttachPolls && canAttachRankingPolls[5] && renderRankingPoll(5) }\n        {canAttachPolls && canAttachRankingPolls[4] && renderRankingPoll(4) }\n        {canAttachPolls && canAttachRankingPolls[3] && renderRankingPoll(3) }\n        {canAttachPolls && canAttachRankingPolls[2] && renderRankingPoll(2) }\n        {canAttachPolls && canAttachRankingPolls[1] && renderRankingPoll(1) }\n\n        {canAttachPolls && canAttachDelegatePolls && (\n          <MenuItem icon=\"poll\" onClick={handleDelegatePoll}>\n            {lang('Delegate poll')}\n          </MenuItem>\n        )}\n\n        {canAttachResultReport && (\n          <MenuItem icon=\"poll\" onClick={handleResultReport}>\n            {lang('Consensus results')}\n          </MenuItem>\n        )}\n\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\n\nimport './PollModal.scss';\nimport type { AccountPromptInfo, AccountPromptDefaults } from '../../../global/types';\nimport TextArea from '../../ui/TextArea';\nimport { composePrompt } from '../../../global/helpers/consensusMessages';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  defaultValues: AccountPromptDefaults;\n  onSend: (info: AccountPromptInfo) => void;\n  onClear: () => void;\n};\n\nconst AccountPromptModal: FC<OwnProps> = ({\n  isOpen, defaultValues, onSend, onClear,\n}) => {\n  const [platform, setPlatform] = useState<string>(defaultValues.platform);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const promptMsg = useMemo(() => composePrompt(platform), [platform]);\n\n  const lang = useLang();\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setHasErrors(false);\n    } else if (isOpen && defaultValues) {\n      setPlatform(defaultValues.platform);\n    }\n  }, [isOpen, defaultValues]);\n\n  const handleSend = useCallback(() => {\n    if (!platform.length) {\n      setHasErrors(true);\n      return;\n    }\n\n    onSend({ platform, promptMessage: promptMsg });\n  }, [onSend, platform, promptMsg]);\n\n  const handlePlatformChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newPlatform = e.target.value;\n    setPlatform(newPlatform);\n  }, []);\n\n  const getPlatformError = useCallback(() => {\n    if (hasErrors && !platform.trim().length) {\n      return lang('Please enter platform name');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, platform]);\n\n  // TODO: Message preview\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel message creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('Send account prompt')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleSend}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        label={lang('Platform')}\n        value={platform}\n        onChange={handlePlatformChange}\n        error={getPlatformError()}\n      />\n\n      <TextArea\n        label={lang('Message Preview')}\n        disabled\n        value={promptMsg}\n      />\n\n    </Modal>\n  );\n};\n\nexport default memo(AccountPromptModal);\n","import type { ChangeEvent } from 'react';\nimport type { ExtPlatformInfo } from '../../../global/types';\nimport useLang from '../../../hooks/useLang';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport RadioGroup from '../../ui/RadioGroup';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport assert from '../../../util/assert';\nimport { PLATFORM_RE } from '../../../config';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  defaultExtPlatform?: ExtPlatformInfo;\n  presetOptions: Record<string, ExtPlatformInfo>;\n  onSubmit: (selection?: ExtPlatformInfo) => void;\n  onClear: () => void;\n};\n\nconst ExtPlatformSettings: FC<OwnProps> = ({\n  isOpen, defaultExtPlatform, presetOptions, onSubmit, onClear,\n}) => {\n  const lang = useLang();\n\n  const [extPlatform, setExtPlatform] = useState<ExtPlatformInfo | undefined>(defaultExtPlatform);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  useEffect(() => {\n    setExtPlatform(defaultExtPlatform);\n  }, [defaultExtPlatform]);\n\n  const radioSelection = useMemo(() => {\n    if (!extPlatform) {\n      return 'none';\n    } else {\n      const matchingInfo = presetOptions[extPlatform.fractalName];\n      if (matchingInfo?.platform === extPlatform.platform\n          && matchingInfo?.submitUrl === extPlatform.submitUrl) {\n        return extPlatform.fractalName;\n      }\n    }\n\n    return 'custom';\n  }, [extPlatform, presetOptions]);\n\n  const radioOptions = useMemo(() => {\n    const roptions = new Array<IRadioOption>();\n    roptions.push({ label: 'None', value: 'none' });\n    const preset = Object.values(presetOptions).map((info) => {\n      return {\n        label: info.fractalName,\n        subLabel: `platform: ${info.platform}, url: ${info.submitUrl}`,\n        value: info.fractalName,\n      };\n    });\n    roptions.push(...preset);\n    roptions.push({ label: 'Custom', value: 'custom' });\n\n    return roptions;\n  }, [presetOptions]);\n\n  const platform = useMemo(() => {\n    if (!extPlatform) {\n      return '';\n    } else {\n      return extPlatform.platform;\n    }\n  }, [extPlatform]);\n\n  const submitUrl = useMemo(() => {\n    if (!extPlatform) {\n      return 'https://';\n    } else {\n      return extPlatform.submitUrl;\n    }\n  }, [extPlatform]);\n\n  const handleExtPlatformChange = useCallback((newSelection: string) => {\n    if (newSelection === 'none') {\n      setExtPlatform(undefined);\n    } else if (newSelection === 'custom') {\n      setExtPlatform({\n        fractalName: 'custom',\n        platform: '',\n        submitUrl: 'https://',\n      });\n    } else {\n      setExtPlatform(presetOptions[newSelection]);\n    }\n  }, [presetOptions]);\n\n  const handleCustomChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const { id, value } = e.currentTarget;\n    if (!extPlatform) {\n      // This should never happen\n      return;\n    }\n    setExtPlatform({ ...extPlatform, [id]: value });\n  }, [extPlatform]);\n\n  const getPlatformError = useCallback(() => {\n    if (hasErrors && extPlatform) {\n      const match = (extPlatform as ExtPlatformInfo).platform.match(PLATFORM_RE);\n      if (!match) {\n        return lang('Platform name has to be one word');\n      }\n    }\n\n    return undefined;\n  }, [extPlatform, lang, hasErrors]);\n\n  // TODO: Check if valid URL as well\n  const handleSubmit = useCallback(() => {\n    if (radioSelection === 'none') {\n      onSubmit(undefined);\n    } else {\n      assert(extPlatform, 'extPlatform cannnot be undefined here');\n      const match = (extPlatform as ExtPlatformInfo).platform.match(PLATFORM_RE);\n      if (!match) {\n        setHasErrors(true);\n      } else {\n        onSubmit(extPlatform);\n      }\n    }\n  }, [onSubmit, extPlatform, radioSelection]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel message creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('Link to platform')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleSubmit}\n        >\n          {lang('Next')}\n        </Button>\n      </div>\n    );\n  }\n\n  // TODO: Check that platform input is a single word\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      {/* <h3 className=\"options-header\">{lang('Link to external platform')}</h3> */}\n      <RadioGroup\n        name=\"extplatform\"\n        options={radioOptions}\n        selected={radioSelection}\n        onChange={handleExtPlatformChange}\n      />\n\n      <InputText\n        id=\"platform\"\n        label={lang('Platform')}\n        value={platform}\n        onChange={handleCustomChange}\n        disabled={radioSelection !== 'custom'}\n        error={getPlatformError()}\n      />\n\n      <InputText\n        id=\"submitUrl\"\n        label={lang('Submit URL')}\n        value={submitUrl}\n        onChange={handleCustomChange}\n        disabled={radioSelection !== 'custom'}\n        inputMode=\"url\"\n        // error={getPlatformError()}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(ExtPlatformSettings);\n","import type { ChangeEvent } from 'react';\nimport useLang from '../../../hooks/useLang';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  defaultGroupNum?: number;\n  onClear: () => void;\n  onSubmit: (groupNum: number) => void;\n};\n\nconst GroupNumberEdit: FC<OwnProps> = ({\n  isOpen, defaultGroupNum, onClear, onSubmit,\n}) => {\n  const lang = useLang();\n\n  const [hasErrors, setHassErrors] = useState<boolean>(false);\n  const [groupNumber, setGroupNumber] = useState<string>(defaultGroupNum?.toString() ?? '');\n\n  useEffect(() => {\n    if (isOpen) {\n      setGroupNumber(defaultGroupNum?.toString() ?? '');\n    }\n  }, [defaultGroupNum, isOpen]);\n\n  const handleGroupNumChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setGroupNumber(e.target.value);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    const num = Number(groupNumber);\n    if (Number.isNaN(num)) {\n      setHassErrors(true);\n      return;\n    }\n\n    onSubmit(num);\n  }, [groupNumber, onSubmit]);\n\n  const getGroupNumError = useCallback(() => {\n    if (hasErrors) {\n      const num = Number(groupNumber);\n      if (Number.isNaN(num)) {\n        return lang('Has to be a number');\n      }\n    }\n\n    return undefined;\n  }, [hasErrors, groupNumber, lang]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel message creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('Group number')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleSubmit}\n        >\n          {lang('Next')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        label={lang('Group number')}\n        value={groupNumber}\n        inputMode=\"numeric\"\n        error={getGroupNumError()}\n        onChange={handleGroupNumChange}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(GroupNumberEdit);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport './PollModal.scss';\n// import TextArea from '../../ui/TextArea';\nimport Checkbox from '../../ui/Checkbox';\nimport buildClassName from '../../../util/buildClassName';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  defaultMessage: string;\n  pinMessageDefault?: boolean;\n  onSend: (message: string, toPin: boolean) => void;\n  onClear: () => void;\n};\n\nconst SendMessageModal: FC<OwnProps> = ({\n  isOpen, defaultMessage, pinMessageDefault, onSend, onClear,\n}) => {\n  const [message, setMessage] = useState<string>(defaultMessage);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n  const [toPin, setToPin] = useState<boolean>(pinMessageDefault ?? false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      setMessage(defaultMessage);\n    }\n  }, [isOpen, defaultMessage]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setToPin(pinMessageDefault ?? false);\n    }\n  }, [pinMessageDefault, isOpen]);\n\n  const handleMessageChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setMessage(e.target.value);\n  }, []);\n\n  const handleToPinChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setToPin(e.target.checked);\n  }, []);\n\n  const handleSend = useCallback(() => {\n    if (!message.length) {\n      setHasErrors(true);\n      return;\n    }\n\n    onSend(message, toPin);\n  }, [onSend, message, toPin]);\n\n  const getMessageError = useCallback(() => {\n    if (hasErrors && !message.length) {\n      return lang('Message should not be empty');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, message]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel message creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('Send message')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleSend}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  const err = getMessageError();\n  const labelText = err || lang('Message');\n  const fullClass = buildClassName(\n    'form-control',\n    err ? 'error' : undefined,\n  );\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()}>\n\n      <Checkbox\n        label={lang('Pin message')}\n        checked={toPin}\n        onChange={handleToPinChange}\n      />\n\n      <textarea\n        className={fullClass}\n        dir=\"auto\"\n        value={message}\n        inputMode=\"text\"\n        onChange={handleMessageChange}\n        aria-label={labelText}\n        style=\"height:28em;\"\n      />\n\n    </Modal>\n  );\n};\n\nexport default memo(SendMessageModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\nimport React, {\n  memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport './PollModal.scss';\nimport { FRACTAL_INFO } from '../../../config';\nimport ExtPlatformSettings from './ExtPlatformSettings';\nimport type { ExtPlatformInfo, GlobalState } from '../../../global/types';\nimport { createConsensusResultMsg } from '../../../global/helpers/consensusMessages';\nimport GroupNumberEdit from './GroupNumberEdit';\nimport SendMessageModal from './SendMessageModal';\n\nexport type OwnProps = {\n  values: GlobalState['consensusResultsModal'];\n  onSend: (msg: string, pinned: boolean) => void;\n  onClear: () => void;\n};\n\nconst FractalResultModal: FC<OwnProps> = ({\n  values, onClear, // onSend\n}) => {\n  const {\n    isOpen, page, extPlatformInfo, guessedResults,\n  } = values;\n  const { composeConsensusMessage } = getActions();\n\n  const guessedMessage = useMemo<string>(() => {\n    if (guessedResults) {\n      return createConsensusResultMsg(\n        guessedResults,\n        extPlatformInfo?.submitUrl,\n        extPlatformInfo?.platform,\n        extPlatformInfo?.accountInfoUrl,\n      );\n    } else {\n      return '';\n    }\n  }, [guessedResults, extPlatformInfo]);\n\n  const handlePlatformSubmit = useCallback((selection?: ExtPlatformInfo) => {\n    composeConsensusMessage({ type: 'resultsReportPlatformSelect', extPlatformInfo: selection });\n  }, [composeConsensusMessage]);\n\n  const handleGroupNumSubmit = useCallback((groupNum: number) => {\n    composeConsensusMessage({ type: 'resultsReportGroupNumSelect', groupNum });\n  }, [composeConsensusMessage]);\n\n  const handleSend = useCallback((msg: string, toPin: boolean) => {\n    composeConsensusMessage({\n      type: 'resultsReportSubmit',\n      message: msg,\n      pinMessage: toPin,\n    });\n  }, [composeConsensusMessage]);\n\n  return (\n    <div>\n      <ExtPlatformSettings\n        isOpen={page === 'extPlatform' && isOpen}\n        defaultExtPlatform={extPlatformInfo}\n        presetOptions={FRACTAL_INFO}\n        onClear={onClear}\n        onSubmit={handlePlatformSubmit}\n      />\n\n      <GroupNumberEdit\n        isOpen={page === 'editGroupNumber' && isOpen}\n        defaultGroupNum={guessedResults?.groupNum}\n        onClear={onClear}\n        onSubmit={handleGroupNumSubmit}\n      />\n\n      <SendMessageModal\n        isOpen={page === 'editText' && isOpen}\n        defaultMessage={guessedMessage}\n        pinMessageDefault\n        onClear={onClear}\n        onSend={handleSend}\n      />\n\n    </div>\n  );\n};\n\nexport default memo(FractalResultModal);\n","import useLang from '../../../hooks/useLang';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n} from '../../../lib/teact/teact';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\n\nimport './LoadingModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  title: string;\n  onClear: () => void;\n};\n\nconst LoadingModal: FC<OwnProps> = ({\n  isOpen, title, onClear,\n}) => {\n  const lang = useLang();\n\n  // TODO: How to allow canceling\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(title)}</div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"LoadingModal\">\n      <Spinner className=\"spinner\" backgroundColor=\"light\" />\n    </Modal>\n  );\n};\n\nexport default memo(LoadingModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { AccountPromptInfo, GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { hasPreview } from '../../../util/files';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport AccountPromptModal from './AccountPromptModal';\nimport FractalResultModal from './FractalResultModal';\nimport LoadingModal from './LoadingModal';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    accountPromptModal: GlobalState['accountPromptModal'];\n    consensusResultsModal: GlobalState['consensusResultsModal'];\n    loadingModal: GlobalState['loadingModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  accountPromptModal,\n  consensusResultsModal,\n  loadingModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    closeAccountPromptModal,\n    closeResultsReportModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openLimitReachedModal,\n    openPremiumModal,\n    addRecentCustomEmoji,\n    showNotification,\n    composeConsensusMessage,\n    sendPinnedMessage,\n    closeLoadingModal,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && threadId === MAIN_THREAD_ID && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal],\n  );\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canAttachDelegatePolls, canAttachAccountPrompts, canAttachResultReport,\n    canAttachRankingPolls,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu, setHtml]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: () => openPremiumModal({ initialSection: 'animated_emoji' }),\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: () => openChat({ id: currentUserId, shouldReplaceHistory: true }),\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, openChat, openPremiumModal, showNotification]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const handleFileSelect = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))));\n  }, [handleSetAttachments]);\n\n  const handleAppendFiles = useCallback(async (files: File[], isQuick: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => buildAttachment(file.name, file, isQuick))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleClearAttachment = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, []);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          false,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!currentAttachments.length && !text && !isForwarding) {\n      return;\n    }\n\n    // No need to subscribe on updates in `mapStateToProps`\n    const { serverTimeOffset } = getGlobal();\n\n    const maxLength = currentAttachments.length ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (currentAttachments.length || text) {\n      if (slowMode && !isAdmin) {\n        const nowSeconds = getServerTime(serverTimeOffset);\n        const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n          && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n        const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n        if (\n          (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n          || nextSendDateNotReached\n        ) {\n          const secondsRemaining = nextSendDateNotReached\n            ? slowMode.nextSendDate! - nowSeconds\n            : slowMode.seconds - secondsSinceLastMessage!;\n          showDialog({\n            data: {\n              message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n              isSlowMode: true,\n              hasErrorKey: false,\n            },\n          });\n\n          messageInput?.blur();\n\n          return;\n        }\n      }\n\n      sendMessage({\n        text,\n        entities,\n        attachments: currentAttachments,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime(serverTimeOffset);\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, isForwarding, clearDraft, chatId, captionLimit,\n    resetComposer, stopRecordingVoice, showDialog, slowMode, isAdmin, sendMessage, forwardMessages, lang, htmlRef,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') return;\n    callAttachBot({\n      botId: chatId, chatId, isFromBotMenu: true, url: botMenuButton.url,\n    });\n  }, [botMenuButton, callAttachBot, chatId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      const isQuick = requestedDraftFiles.every((file) => hasPreview(file));\n      handleFileSelect(requestedDraftFiles, isQuick);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll, pinned: boolean) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      if (pinned) {\n        sendPinnedMessage({ poll });\n      } else {\n        sendMessage({ poll });\n      }\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, sendPinnedMessage, shouldSchedule]);\n\n  const handleAccountPromptSend = useCallback((value: AccountPromptInfo) => {\n    composeConsensusMessage({ type: 'accountPromptSubmit', value });\n  }, [composeConsensusMessage]);\n\n  const handleResultsSend = useCallback((message: string, pinMessage: boolean) => {\n    composeConsensusMessage({ type: 'resultsReportSubmit', message, pinMessage });\n  }, [composeConsensusMessage]);\n\n  const handleSendSilent = useCallback(() => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ isSilent: true }, scheduledAt);\n      });\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        captionLimit={captionLimit}\n        caption={attachments.length ? html : ''}\n        groupChatMembers={groupChatMembers}\n        currentUserId={currentUserId}\n        recentEmojis={recentEmojis}\n        isReady={isReady}\n        isChatWithSelf={isChatWithSelf}\n        onCaptionUpdate={setHtml}\n        baseEmojiKeywords={baseEmojiKeywords}\n        emojiKeywords={emojiKeywords}\n        shouldSchedule={shouldSchedule}\n        onSendSilent={handleSendSilent}\n        onSend={handleSend}\n        onSendScheduled={handleSendScheduled}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachment}\n        shouldSuggestCustomEmoji={shouldSuggestCustomEmoji}\n        customEmojiForEmoji={customEmojiForEmoji}\n      />\n      <LoadingModal\n        isOpen={loadingModal.isOpen}\n        title={loadingModal.title}\n        onClear={closeLoadingModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        defaultValues={pollModal.defaultValues}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      <AccountPromptModal\n        isOpen={accountPromptModal.isOpen}\n        defaultValues={accountPromptModal.defaultValues}\n        onSend={handleAccountPromptSend}\n        onClear={closeAccountPromptModal}\n      />\n      <FractalResultModal\n        values={consensusResultsModal}\n        onSend={handleResultsSend}\n        onClear={closeResultsReportModal}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {(isChatWithBot && isBotMenuButtonCommands\n            && botCommands !== false && !activeVoiceRecording && !editingMessage) && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {botKeyboardMessageId && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && currentRecordTime && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canAttachDelegatePolls={canAttachDelegatePolls}\n            canAttachAccountPrompts={canAttachAccountPrompts}\n            canAttachRankingPolls={canAttachRankingPolls}\n            canAttachResultReport={canAttachResultReport}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            onConsensusMsg={composeConsensusMessage}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {botKeyboardMessageId && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        threadId === MAIN_THREAD_ID\n        && messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      accountPromptModal: global.accountPromptModal,\n      consensusResultsModal: global.consensusResultsModal,\n      loadingModal: global.loadingModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  IS_TOUCH_ENV,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat, getMessageSendingRestrictionReason, isChatChannel, isChatGroup, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && messageSendingRestrictionReason,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingCanStartBot || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {messageSendingRestrictionReason}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined),\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        threadId !== MAIN_THREAD_ID\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { ManagementScreens, ProfileState } from '../../types';\nimport type { ApiExportedInvite } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, isChatAdmin, isChatChannel, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{lang(isChannel ? 'Channel.TitleInfo' : (userId ? 'UserInfo.Title' : 'GroupInfo.Title'))}</h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isProfile, isManagement }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  isRightColumnShown: boolean,\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  chatId?: string,\n  lastSyncTime?: number,\n  serverTimeOffset = 0,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [groupChatMembers, serverTimeOffset, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  serverTimeOffset: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n  { type: 'voice', title: 'SharedVoiceTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  chatMessages,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  serverTimeOffset,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    ...(hasCommonChatsTab ? [{\n      type: 'commonChats', title: 'SharedGroupsTab2',\n    }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel]);\n  const tabType = tabs[activeTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    isRightColumnShown,\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    chatId,\n    lastSyncTime,\n    serverTimeOffset,\n  );\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(activeTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, activeTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeTab, tabs.length]);\n\n  let renderingDelay;\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, resultType], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={activeTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatMessages = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = isGroup || (isChannel && isChatAdmin(chat!));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      chatMessages,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      serverTimeOffset: global.serverTimeOffset,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers),\n    onBack: () => close(false),\n  });\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n    }\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createMessageHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createMessageHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiUser;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall && selectUser(global, requestedAttachBotInstall.botId),\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","uploadProgressCallbacks","Map","messageSentCallbacks","messageSentIds","runDebouncedForMarkRead","debounce","cb","async","loadRemainingMessages","chat","selectChat","isRestricted","size","listedIds","selectListedIds","length","loadViewportMessages","LoadMoreDirection","getGlobal","sendMessageImpl","sentCb","scheduledAt","params","replyingTo","selectReplyingToId","noWebPage","selectNoWebPage","sendAs","selectSendAs","setReplyingToId","messageId","clearWebPagePreview","value","isSingle","attachments","isGrouped","restParams","sendMessage","attachment","entities","commonParams","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","i","firstAttachment","restAttachments","groupedId","Date","now","forEach","offsetId","direction","isOutlying","isBudgetPreload","limit","MESSAGE_LIST_SLICE","addOffset","Math","round","result","callApi","selectThreadOriginChat","users","chats","threadInfos","localMessages","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","filter","isDeleted","map","message","allMessages","concat","byId","buildCollectionByKey","ids","Object","keys","Number","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","max","areSomeLocal","areAllLocal","messageSentCb","localId","progressCallback","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","IS_IOS","rafPromise","serverTimeOffset","msgId","selectThreadTopMessageId","replyingToTopId","generateMessageId","delete","viewportIds","selectViewportIds","Boolean","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","includes","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","selectChatMessage","updateChatMessage","replyToMessageId","loadMessage","lastMessageId","isDeleting","updateThreadUnreadFromForwardedMessage","selectCurrentChat","isUnpin","isOneSide","isSilent","getActions","pinMessage","messageListType","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","unpinAllMessages","messageIds","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","showNotification","getTranslation","action","currentUserId","isUserBot","maxId","notification","isUnread","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","lastReadInboxMessageId","webPagePreview","loadWebPagePreview","options","poll","content","option","offset","shouldResetVoters","voters","pollResults","unique","offsets","nextOffset","loadPollOptionResults","fromChatId","withMyScore","noAuthors","noCaptions","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","sort","a","b","realMessages","m","isServiceNotificationMessage","sticker","replaceScheduledMessages","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","update","providedId","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","focusMessage","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","data","getUserFullName","isModalShown","closeMediaViewer","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","openPollModal","isQuiz","defaultValues","pollModal","closeAccountPromptModal","accountPromptModal","openResultsReportModal","page","extPlatformInfo","guessedResults","consensusResultsModal","closeResultsReportModal","openLoadingModal","title","loadingModal","closeLoadingModal","constructAccountOption","platform","extAccount","extAccounts","id1","id2","firstName","usernames","username","optionToAccount","accountMap","optionStr","regResult","extAccountStr","platformStr","nameStr","id1Matches","Array","id2Matches","userId","push","createPollWithAccounts","question","opt","selectChatMemberAccountMap","constructAccountOptions","getAccountOptions","assert","isAnonymous","pinned","getWinnerOption","results","winnerOption","winnerVotes","winnerCount","votersCount","answer","summary","answers","find","refUser","votes","ofTotal","getLatestPlatform","latestPromptStr","selectLatestPrompt","promptStrToPlatform","copyTextForMessages","lang","langProvider","chatMessages","selectScheduledMessages","selectChatMessages","selectAllowedMessageActions","canCopy","message1","message2","reduce","acc","sender","selectSender","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","replyingToId","selectIsViewportNewest","chatMessageKeys","newIndex","toString","lastMessage","selectThreadInfo","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","setTimeout","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","isResizingContainer","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","groupedMessageIds","selectMessageIdsByGroupId","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","sendPinnedMessage","SELECT_DELEGATE_STR","rank","RANK_POLL_STRS","DEFAULT_PLATFORM","openAccountPromptModal","promptMessage","parseMessageInput","FRACTAL_INFO_BY_PLATFORM","membersCount","consensusResults","rankings","delegatePoll","selectLatestDelegatePoll","delegate","userIdsToRank","Set","leftToRank","ALLOWED_RANKS","selectLatestRankingPoll","winner","rankRemaining","userIdRemaining","guessConsensusResults","nextPage","groupNum","RELEASE_DATETIME","currentVersion","APP_VERSION","version","date","getServerTime","isOutgoing","createServiceNotification","serviceChat","fractionalPart","floor","previousLocalId","serviceNotification","reactorModal","seenByModal","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","updateUserSearch","globalUserIds","localUserIds","newContact","isByPhoneNumber","closeNewContactDialog","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","recent","hash","newStickers","s","recentCustomEmojis","order","isCustomEmoji","added","setIds","generateIdFor","newNotifications","notifications","existingNotificationIndex","n","splice","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","APP_VERSION_REGEX","fetch","then","response","trim","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","updateGifSearch","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","config","gifSearchUsername","updateStickersForEmoji","loadStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResult","GLOBAL_SEARCH_SLICE","totalCount","nextOffsetId","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","topMessageId","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","timestamp","searchMessagesByDate","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","revokedInvites","invites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","loadTopMessages","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","draftsByChatId","editingDraft","selectEditingDraft","currentChatId","currentThreadId","currentChat","newCurrentChatId","threadInfo","currentMessageListInfo","originChannelId","currentMessageListInfoOrigin","resultOrigin","byIdOrigin","listedIdsOrigin","threadsById","consensusMsgs","INIT_CONSENSUS_MSGS","updateChats","updateUsers","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userOrChat","avatarHash","userSearch","updateUserSearchFetchingStatus","searchUsers","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","callbackPayload","requestedAttachBotInstall","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","isWriteAllowed","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","selectPaymentInputInvoice","saveInfo","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","step","isClosed","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","omit","activeReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","recentTopMessages","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","areDeepEqual","value1","value2","type1","isArray1","isArray","array1","array2","every","member1","object1","object2","key1","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","isFromScheduled","isActiveChat","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","adminMembersById","formattedText","loadChatJoinRequests","ANIMATION_DELAY","updateReactions","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","force","currentLastMessage","findLastMessage","deleteMessages","newLastMessage","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","updateThreadInfo","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","scheduledIds","selectScheduledIds","selectIsChatWithBot","deleteChatScheduledMessages","thread","markMessageListRead","currentPinnedIds","selectPinnedIds","newPinnedIds","newTheadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","oldOrder","newOrder","reorderStickerSets","loadStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","contactsFilter","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","values","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","DropdownMenu","trigger","footer","APP_NAME","MenuItem","icon","Switcher","label","checked","noAnimation","FEEDBACK_URL","getPromptInstall","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","maxFolders","foldersDispatch","onScreenSelect","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionX","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","remove","useLayoutEffect","style","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","HeaderMenuContainer","isChatChannel","selectIsInSelectMode","noMenu","isChatWithSelf","selectIsChatWithSelf","isMainThread","isDiscussionThread","isRightColumnShown","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","canSearch","canCall","canMute","canLeave","canEnterVoiceChat","isCallActive","canCreateVoiceChat","adminRights","manageCall","isCreator","canViewStatistics","pendingJoinRequests","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","ANIMATION_LEVEL_MIN","canExpandActions","joinChannel","openLocalTextSearch","restartBot","requestCall","requestNextManagementScreen","menuButtonRef","menuPosition","setMenuPosition","handleHeaderMenuOpen","rect","getBoundingClientRect","right","bottom","handleHeaderMenuClose","handleHeaderMenuHide","handleSubscribeClick","handleStartBot","handleRestartBot","handleJoinRequestsClick","ManagementScreens","handleSearchClick","requestAnimationFrame","setFocusInSearchInput","handleHotkeySearchClick","disabled","anchor","withExtraActions","onSubscribeChannel","onSearchClick","onCloseAnimationEnd","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","src","alt","renderPictogram","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","renderPlaybackRateMenuItem","rate","currentRate","customIcon","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","voice","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isFirst","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","handlePlaybackClick","PlaybackRateButton","displayRate","entries","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","noPreventDefault","RangeSlider","bold","forceOpen","onHide","groupCall","selectChatGroupCall","usersById","isLoaded","isCallNotEmpty","hasPinnedOffset","joinGroupCall","subscribeToGroupCallUpdates","handleJoinGroupCall","fetchedParticipants","isUser","subscribed","p","Avatar","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","isButtonsInOneRow","confirmIsDestructive","Checkbox","onCheck","audioMessage","isChatWithBot","isSelectModeActive","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","getMessageKey","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_LOADING","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","isEmbedded","appearanceOrder","isLastInList","memoFirstUnreadIdRef","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isVisible","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","actionText","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","withVideo","formatPhoneNumberWithCode","getPercentage","toFixed","voteResults","maxVotersCount","correctResults","shouldAnimate","showFraction","correctAnswer","showIcon","answerPercent","votesFraction","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","getReadableVotersCount","memberCount","consensusMessages","selectChatConsensusMsgs","onSendVote","openPollResults","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isConsensusPoll","isConsensusMsg","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","canvasRef","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","stickerHash","getStickerPreviewHash","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","path","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","getReactionUniqueKey","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectIsDownloading","actualThreadInfo","reactionMessage","hasUnreadReaction","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","noComments","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","entry","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","offsetHeight","scrollHeight","scrollTop","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","handleResize","contentRect","useResizeObserver","windowHeight","normalHeight","String","clientHeight","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","isAnimatingScroll","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","MAX_QUICK_IMG_SIZE","FILE_EXT_REGEX","buildAttachment","filename","isQuick","mimeType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","preloadImage","shouldShrink","resizedUrl","fetchBlob","SUPPORTED_VIDEO_CONTENT_TYPES","videoWidth","videoHeight","preloadVideo","createPosterForVideo","SUPPORTED_AUDIO_CONTENT_TYPES","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","CLIPBOARD_ACCEPTED_TYPES","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","canAttachDelegatePolls","canAttachRankingPolls","canAttachResultReport","canAttachAccountPrompts","attachBots","onFileSelect","onPollCreate","onConsensusMsg","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","handleDelegatePoll","handleRankingPoll","handleAccountPrompt","handleResultReport","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","renderRankingPoll","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","onSend","setPlatform","hasErrors","setHasErrors","promptMsg","composePrompt","handleSend","handlePlatformChange","newPlatform","getPlatformError","Modal","header","InputText","TextArea","defaultExtPlatform","presetOptions","onSubmit","extPlatform","setExtPlatform","radioSelection","matchingInfo","fractalName","submitUrl","radioOptions","roptions","preset","info","subLabel","handleExtPlatformChange","newSelection","handleCustomChange","PLATFORM_RE","handleSubmit","selected","inputMode","defaultGroupNum","setHassErrors","groupNumber","setGroupNumber","handleGroupNumChange","num","isNaN","getGroupNumError","defaultMessage","pinMessageDefault","setMessage","toPin","setToPin","handleMessageChange","handleToPinChange","getMessageError","labelText","fullClass","composeConsensusMessage","guessedMessage","createConsensusResultMsg","accountInfoUrl","handlePlatformSubmit","selection","handleGroupNumSubmit","FRACTAL_INFO","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","handleSetAttachments","newValue","newAttachments","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","file","textToPaste","useClipboardPaste","handleEmbeddedClear","handleAppendFiles","handleClearAttachment","currentAttachments","record","maxLength","extraLength","textParams","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","shouldUpdateStickerSetsOrder","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","hasPreview","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","handleAccountPromptSend","handleResultsSend","handleSendSilent","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","isBotMenuButtonCommands","DropAreaState","withQuick","caption","onCaptionUpdate","onSendSilent","onSendScheduled","onFileAppend","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","pinnedIds","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldLoadFullChat","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","getCanAddContact","canManage","isEditingInvite","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","isFirstTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createMessageHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","decryptSession","handleSignOutMessage","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","Link"],"sourceRoot":""}